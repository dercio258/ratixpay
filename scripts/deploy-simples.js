#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üöÄ RatixPay - Deploy Simples');
console.log('=============================\n');

// Verificar se est√° no diret√≥rio correto
if (!fs.existsSync('package.json')) {
    console.error('‚ùå Erro: Execute este script na pasta raiz do projeto');
    process.exit(1);
}

// Verificar arquivos essenciais
const arquivosEssenciais = [
    'server.js',
    'package.json',
    'render.yaml',
    'env.example'
];

console.log('üìã Verificando arquivos essenciais...');
let todosArquivosExistem = true;

arquivosEssenciais.forEach(arquivo => {
    if (fs.existsSync(arquivo)) {
        console.log(`‚úÖ ${arquivo}`);
    } else {
        console.log(`‚ùå ${arquivo} - FALTANDO`);
        todosArquivosExistem = false;
    }
});

if (!todosArquivosExistem) {
    console.error('\n‚ùå Alguns arquivos essenciais est√£o faltando!');
    process.exit(1);
}

console.log('\n‚úÖ Todos os arquivos essenciais encontrados!');

// Verificar depend√™ncias
console.log('\nüì¶ Verificando depend√™ncias...');
const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));

const dependenciasObrigatorias = [
    'express',
    'sqlite3',
    'cors',
    'helmet',
    'express-rate-limit',
    'express-slow-down',
    'bcryptjs',
    'express-validator',
    'nodemailer'
];

let todasDependenciasExistem = true;

dependenciasObrigatorias.forEach(dep => {
    if (packageJson.dependencies && packageJson.dependencies[dep]) {
        console.log(`‚úÖ ${dep}`);
    } else if (packageJson.devDependencies && packageJson.devDependencies[dep]) {
        console.log(`‚úÖ ${dep} (dev)`);
    } else {
        console.log(`‚ùå ${dep} - FALTANDO`);
        todasDependenciasExistem = false;
    }
});

if (!todasDependenciasExistem) {
    console.error('\n‚ùå Algumas depend√™ncias est√£o faltando!');
    console.log('Execute: npm install');
    process.exit(1);
}

console.log('\n‚úÖ Todas as depend√™ncias est√£o instaladas!');

// Verificar scripts
console.log('\nüîß Verificando scripts...');
if (packageJson.scripts && packageJson.scripts.start) {
    console.log('‚úÖ Script start configurado');
} else {
    console.log('‚ùå Script start n√£o encontrado');
    console.log('Adicione em package.json: "start": "node server.js"');
}

// Verificar estrutura de pastas
console.log('\nüìÅ Verificando estrutura de pastas...');
const pastasObrigatorias = [
    'routes',
    'models',
    'database',
    'middleware',
    'utils',
    'public'
];

pastasObrigatorias.forEach(pasta => {
    if (fs.existsSync(pasta)) {
        console.log(`‚úÖ ${pasta}/`);
    } else {
        console.log(`‚ùå ${pasta}/ - FALTANDO`);
    }
});

// Gerar chaves de seguran√ßa
console.log('\nüîê Gerando chaves de seguran√ßa...');
const crypto = require('crypto');

const jwtSecret = crypto.randomBytes(64).toString('hex');
const sessionSecret = crypto.randomBytes(64).toString('hex');
const encryptionKey = crypto.randomBytes(32).toString('hex');
const signatureKey = crypto.randomBytes(32).toString('hex');

console.log('‚úÖ Chaves geradas com sucesso!');

// Criar arquivo .env.production
console.log('\nüìù Criando arquivo .env.production...');
const envContent = `# Configura√ß√µes de Produ√ß√£o - RatixPay
NODE_ENV=production
PORT=10000

# Seguran√ßa
JWT_SECRET=${jwtSecret}
SESSION_SECRET=${sessionSecret}
ENCRYPTION_KEY=${encryptionKey}
SIGNATURE_KEY=${signatureKey}

# Email (Gmail)
EMAIL_USER=seu_email@gmail.com
EMAIL_PASSWORD=sua_senha_de_app_gmail
ADMIN_EMAIL=admin@seudominio.com

# PagaMoz
PAGAMOZ_SECRET_KEY=sua_chave_secreta_aqui
PAGAMOZ_WALLET_ID=seu_wallet_id_aqui
PAGAMOZ_BASE_URL=https://opay.mucamba.site/api/v1

# Upload
MAX_FILE_SIZE=10485760
UPLOAD_PATH=./uploads
`;

fs.writeFileSync('.env.production', envContent);
console.log('‚úÖ Arquivo .env.production criado!');

// Instru√ß√µes finais
console.log('\nüéâ PROJETO PRONTO PARA DEPLOY!');
console.log('===============================\n');

console.log('üìã PR√ìXIMOS PASSOS:');
console.log('1. Fa√ßa upload do c√≥digo para GitHub');
console.log('2. Crie conta no Render.com');
console.log('3. Conecte com GitHub e fa√ßa deploy');
console.log('4. Configure as vari√°veis de ambiente no Render');
console.log('5. Configure DNS no Hostinger');
console.log('6. Teste tudo funcionando\n');

console.log('üîó LINKS √öTEIS:');
console.log('- Render: https://render.com');
console.log('- Hostinger: https://hostinger.com');
console.log('- GitHub: https://github.com\n');

console.log('üìñ DOCUMENTA√á√ÉO:');
console.log('- Deploy Simples: DEPLOY_SIMPLES.md');
console.log('- Guia Render Gratuito: RENDER_FREE_GUIDE.md');
console.log('- Guia de Seguran√ßa: SECURITY_GUIDE.md\n');

console.log('üîê CHAVES DE SEGURAN√áA GERADAS:');
console.log('Copie estas chaves para as vari√°veis de ambiente no Render:');
console.log(`JWT_SECRET=${jwtSecret}`);
console.log(`SESSION_SECRET=${sessionSecret}`);
console.log(`ENCRYPTION_KEY=${encryptionKey}`);
console.log(`SIGNATURE_KEY=${signatureKey}\n`);

console.log('‚ö†Ô∏è  IMPORTANTE:');
console.log('- Nunca compartilhe as chaves de seguran√ßa');
console.log('- Configure todas as vari√°veis de ambiente no Render');
console.log('- Teste todos os endpoints ap√≥s o deploy');
console.log('- Configure monitoramento de uptime\n');

console.log('üöÄ BOA SORTE COM O DEPLOY!'); 